# read in the file(s) -- there can be multiple
# whitespace separated files, and you can
# escape new lines if necessary
read -formal pond_formal/LakeTop_W.v #lake/dsl_formal_pond/pond_valid.v #./global_buffer.sv;

# prep does a conservative elaboration
# of the top module provided
prep -top LakeTop_W; #global_buffer;


# this command just does a sanity check
# of the hierarchy
hierarchy -check;

# this processes memories
# nomap means it will keep them as arrays
memory -nomap;


# (optional) use an "explicit" clock
# e.g. every state is a half cycle of the
# fastest clock
# use this option if you see errors that
# refer to "adff" or asynchronous components
# IMPORTANT NOTE: the clocks are not
# automatically toggled if you use this option
# clk2fflogic;

#flatten
clk2fflogic;
flatten
prep -flatten;

async2sync;

#flatten;

# If an assumption is flopped, you might
# see strange behavior at the last state
# (because the clock hasn't toggled)
# this command ensures that assumptions
# hold at every state
chformal -assume -early;

# This turns all undriven signals into
# inputs
setundef -undriven -expose;

#initialize all signals after reset to 0
#sim -clock clk -resetn rst_n -n 3 -w -zinit;
#sim -clock clk -resetn rst_n -n 2 -rstlen 2 -w -zinit;

# This writes to a file in BTOR2 format
write_btor ./global_buffer.btor2
